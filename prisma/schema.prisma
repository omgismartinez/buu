// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Universities
enum Modality {
    Presencial
    Semipresencial
    Virtual
}

model Carrer {
    id        String   @id @default(cuid())
    campusId  String
    name      String
    semesters Int
    modality  Modality @default(Presencial)
    campus    Campus[]
}

model Campus {
    id        String   @id @default(cuid())
    regionId  String
    name      String
    subname   String?
    url       String
    direction String
    location  String
    carrers   Carrer[]
    Region    Region   @relation(fields: [regionId], references: [id])
}

model Region {
    id           String     @id @default(cuid())
    universityId String
    name         String
    campus       Campus[]
    University   University @relation(fields: [universityId], references: [id])
}

model University {
    id          String   @id @unique @default(cuid())
    regionId    String
    name        String
    subname     String?
    logo        String
    url         String?
    description String?
    location    String
    country     String
    region      Region[]
}
