// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Universities
enum Modality {
    Presencial
    Hibrido
    Virtual
}

enum Type {
    Publica
    Privada
}

model Carrer {
    id           Int        @id @default(autoincrement())
    campusId     Int        @unique
    universityId Int        @unique
    name         String     @unique
    semesters    Int
    curriculum   String?
    modality     Modality   @default(Presencial)
    campus       Campus     @relation(fields: [campusId], references: [id], onDelete: Cascade)
    university   University @relation(fields: [universityId], references: [id])
}

model Campus {
    id        Int      @id @default(autoincrement())
    regionId  Int      @unique
    name      String
    subname   String?
    url       String?
    direction String
    contact   String?
    location  String
    carrers   Carrer[]
    region    Region   @relation(fields: [regionId], references: [id], onDelete: Cascade)
}

model Region {
    id         Int          @id @default(autoincrement())
    name       String
    campus     Campus[]
    university University[]
}

model University {
    id          Int      @id @unique @default(autoincrement())
    name        String   @unique
    subname     String?  @unique
    logo        String
    url         String?
    description String?
    type        Type     @default(Publica)
    ranking     Int?     @unique
    location    String
    country     String?  @default("MÃ©xico")
    regions     Region[]
    Carrer      Carrer[]
}
